// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux4Way.hdl

/**
 * 4-way demultiplexor:
 * {a, b, c, d} = {in, 0, 0, 0} if sel == 00
 *                {0, in, 0, 0} if sel == 01
 *                {0, 0, in, 0} if sel == 10
 *                {0, 0, 0, in} if sel == 11
 */

// sel[2] == 01
// !!! sel[1] == 0, sel[0] == 1

CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    // Put your code here:
    // Not(in=sel[0], out=notsel0);
    // Not(in=sel[1], out=notsel1);
    // And(a=notsel0, b=notsel1, out=temp1);
    // And(a=in, b=temp1, out=a);
    // And(a=sel[0], b=notsel1, out=temp2);
    // And(a=in, b=temp2, out=b);
    // And(a=notsel0, b=sel[1], out=temp3);
    // And(a=in, b=temp3, out=c);
    // And(a=sel[0], b=sel[1], out=temp4);
    // And(a=in, b=temp4, out=d);

    // Not(in=sel[0], out=notsel0);
    // Not(in=sel[1], out=notsel1);
    // And(a=notsel1, b=notsel0, out=tempa);
    // And(a=notsel1, b=sel[0], out=tempb);
    // Or(a=tempa, b=tempb, out=temp1);
    // And(a=temp1, b=in, out=first);
    // Not(in=first, out=temp2);
    // And(a=temp2, b=in, out=second);
    // DMux(in=first, sel=sel[0], a=a, b=b);
    // DMux(in=second, sel=sel[0], a=c, b=d);

    DMux(in=in, sel=sel[1], a=first, b=second);
    DMux(in=first, sel=sel[0], a=a, b=b);
    DMux(in=second, sel=sel[0], a=c, b=d);
}